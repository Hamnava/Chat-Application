@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height:400px">
    @if (!userMessages.Any())
   {
       <p>No messages yet, start chatting...</p>
   }
   @foreach (var message in userMessages)
  {
      <div class="row mb-3 d-flex @(message.IsCurrentUser? "justify-content-end": "")">
          <div class="card shadow @(message.IsCurrentUser? "color-orange": "")" style="width:15rem">
              <div class="card-header">
                  @message.Username
              </div>
             <ul class="list-group list-group-flush">
                 <li class="list-group-item">@message.Message</li>
             </ul>
             <div class="card-footer">
                 <span class="small">@message.DateSent.ToString("HH:mm | MMM dd")</span>  
             </div>
          </div>
      </div>
  }
</div>
<div class="container mb-5">
    <div class="row">
        <div class="col-3">
            <input type="text" placeholder="Your Name" @bind="usernameInput" class="form-control" readonly="@IsUserReadOnly"/>
        </div>
        <div class="col-7">
            <textarea class="form-control" placeholder="Start Typing..." @bind="messageInput"></textarea>
        </div>
        <div class="col-2">
            <button class="btn btn-primary" type="button" disabled="@(!IsConnected)" @onclick="Send">Send</button>
        </div>
    </div>
</div>
@code {
    private HubConnection hubconnection;
    private List<UserMessage> userMessages = new();

    private string usernameInput;
    private string messageInput;
    private bool IsUserReadOnly = false;

    public bool IsConnected => hubconnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubconnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubconnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(new UserMessage
            {
                Username = user,
                Message = message,
                IsCurrentUser = user == usernameInput,
                DateSent = DateTime.Now
            });
            StateHasChanged();
        });
        await hubconnection.StartAsync();
    }


    private async Task Send()
    {
        if(!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(messageInput))
        {
            await hubconnection.SendAsync("SendMessage", usernameInput, messageInput);
            IsUserReadOnly = true;
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if(hubconnection is not null)
        {
            await hubconnection.DisposeAsync();
        }
    }
}